{"version":3,"file":"static/js/652.17079aaa.chunk.js","mappings":"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","sources":["components/flight-list-grid/flight-list-one-way.jsx","modules/search/flight-search.jsx","services/seat-booking-services.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  Grid,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TablePagination,\r\n  TableRow\r\n} from \"@material-ui/core\";\r\n\r\nimport { useGoogleLogin } from \"@react-oauth/google\";\r\nimport GoogleServiceSingleton from \"../../services/google-service-singleton\";\r\nimport { useUserInfoSession } from \"../header/user-context\";\r\nimport SeatBookingServices from \"../../services/seat-booking-services\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  textAlign: {\r\n    textAlign: \"right\"\r\n  },\r\n  textAlignCenter: {\r\n    textAlign: \"center\"\r\n  },\r\n  cardContainer: {\r\n    marginBottom: 5\r\n  }\r\n}));\r\n\r\nconst FlightListOneWay = (props) => {\r\n  const { flightList, bookNow } = props;\r\n  const classes = useStyles();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [loginDone, setLoginDone] = useState(false);\r\n  const [flightSelected, setFlightSelected] = useState(\"\");\r\n  const [departureCity, setDepartureCity] = useState(\"\");\r\n  const [arrivalCity, setArrivalCity] = useState(\"\");\r\n  const [departureDate, setDepartureDate] = useState(\"\");\r\n  const [departureTime, setDepartureTime] = useState(\"\");\r\n  const [arrivalDate, setArrivalDate] = useState(\"\");\r\n  const [arrivalTime, setArrivalTime] = useState(\"\");\r\n\r\n  const [randomNumber, setRandomNumber] = useState(0); // Add this state for storing the random number\r\n\r\n  const history = useHistory();\r\n  let component = null;\r\n\r\n  // Get session details from cache\r\n  const { userInfoSession, updateUserInfoSession, appendToUserInfoSession } = useUserInfoSession();\r\n\r\n  useEffect(() => {\r\n    if (userInfoSession) {\r\n      setLoginDone(true);\r\n    }\r\n  }, [userInfoSession]);\r\n\r\n  const login = useGoogleLogin({\r\n    onSuccess: async (tokenResponse) => {\r\n      try {\r\n        const userInfo = await GoogleServiceSingleton.getUserInfo(tokenResponse.access_token);\r\n        setLoginDone(true);\r\n        updateUserInfoSession({\r\n          ...userInfo,\r\n          selectedFlightNumber: flightSelected,\r\n          departureCity: departureCity,\r\n          arrivalCity: arrivalCity,\r\n          departureDate: departureDate,\r\n          departureTime: departureTime,\r\n          arrivalDate: arrivalDate,\r\n          arrivalTime: arrivalTime,\r\n        });\r\n        const selectFlightData = await SeatBookingServices.selectFlight(\r\n          userInfo.userId,\r\n          flightSelected,\r\n          departureCity,\r\n          arrivalCity,\r\n          departureDate,\r\n          departureTime,\r\n          arrivalDate,\r\n          arrivalTime,\r\n        )\r\n        console.log(\"Select flight response: \", selectFlightData);\r\n\r\n        // Redirect to /seat-selection\r\n        history.push(\"/seat-selection\");\r\n      } catch (error) {\r\n        // Handle error if user info cannot be retrieved\r\n        console.error(\"Error fetching user info:\", error);\r\n      }\r\n    },\r\n  });\r\n\r\n  const handleFlightSelection = async (flightDetail) => {\r\n    setFlightSelected(flightDetail.flightNumber);\r\n    setDepartureCity(flightDetail.departure);\r\n    setArrivalCity(flightDetail.arrival);\r\n    setDepartureDate(flightDetail.departureDate);\r\n    setDepartureTime(flightDetail.departureTime);\r\n    setArrivalTime(flightDetail.arrivalTime);\r\n    setArrivalDate(flightDetail.arrivalDate);\r\n    if (!userInfoSession) {\r\n      login();\r\n    } else {\r\n      const selectFlightData = await SeatBookingServices.selectFlight(\r\n        userInfoSession.userId,\r\n        flightDetail.flightNumber,\r\n        flightDetail.departure,\r\n        flightDetail.arrival,\r\n        flightDetail.departureDate,\r\n        flightDetail.departureTime,\r\n        flightDetail.arrivalDate,\r\n        flightDetail.arrivalTime,\r\n      )\r\n      console.log(\"Select flight response: \", selectFlightData);\r\n      appendToUserInfoSession({\r\n        selectedFlightNumber: flightDetail.flightNumber,\r\n        departureCity: flightDetail.departure,\r\n        arrivalCity: flightDetail.arrival,\r\n        departureDate: flightDetail.departureDate,\r\n        departureTime: flightDetail.departureTime,\r\n        arrivalDate: flightDetail.arrivalDate,\r\n        arrivalTime: flightDetail.arrivalTime,\r\n      })\r\n      history.push(\"/seat-selection\");\r\n    }\r\n  };\r\n\r\n  if (flightList?.loading) {\r\n    component = <CircularProgress />;\r\n  } else if (flightList?.result?.length > 0) {\r\n    component = (\r\n      <Table>\r\n        <TableBody>\r\n          {flightList.result\r\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            .map((val, index) => {\r\n              const randomPrice = val?.minimumSeatPrice + Math.floor(randomNumber * 399) - 199;\r\n              return (\r\n                <TableRow key={index}>\r\n                  <TableCell>\r\n                    <Card className={classes.cardContainer}>\r\n                      <CardContent>\r\n                        <Grid container>\r\n                          <Grid item xs={2}>\r\n                            <Avatar\r\n                              src={val.airlineLogo}\r\n                              alt={val.airlineName}\r\n                            />\r\n                          </Grid>\r\n                          <Grid\r\n                            item\r\n                            xs={2}\r\n                            className={classes.textAlignCenter}\r\n                          >\r\n                            <Typography align=\"center\">\r\n                              {val.departureTime}\r\n                            </Typography>\r\n                            <Typography variant=\"caption\">\r\n                              {val.departure}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid\r\n                            item\r\n                            xs={2}\r\n                            className={classes.textAlignCenter}\r\n                          >\r\n                            <Typography>{val.airlineName}</Typography>\r\n                            <Typography variant=\"caption\">\r\n                              {val.flightNumber}\r\n                            </Typography>\r\n                            <br />\r\n                            <Typography variant=\"caption\">\r\n                              {val.noOfStops === \"0\"\r\n                                ? `No Stops`\r\n                                : `Non-Stop`}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid\r\n                            item\r\n                            xs={2}\r\n                            className={classes.textAlignCenter}\r\n                          >\r\n                            <Typography>{val.arrivalTime}</Typography>\r\n                            <Typography variant=\"caption\">\r\n                              {val.arrival}\r\n                            </Typography>\r\n                          </Grid>\r\n                          <Grid item xs={4} className={classes.textAlign}>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              style={{ backgroundColor: \"black\", color: \"white\" }}\r\n                              onClick={() => handleFlightSelection(val)}\r\n                            >\r\n                              {`₹ ${randomPrice}`}\r\n                            </Button>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n        </TableBody>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={flightList.result.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={(event, newPage) => setPage(newPage)}\r\n          onChangeRowsPerPage={(event) => {\r\n            setRowsPerPage(parseInt(event.target.value, 10));\r\n            setPage(0);\r\n          }}\r\n        />\r\n      </Table>\r\n    );\r\n  } else if (flightList?.result?.length === 0) {\r\n    component = <Typography>{`No Records Found..`}</Typography>;\r\n  } else if (flightList?.error) {\r\n    component = <Typography>{`Unable to fetch Data...`}</Typography>;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setRandomNumber(Math.random()); // Generate the random number once\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container>\r\n      <Grid item xs={12}>\r\n        {component}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFlightListOneWay.propTypes = {\r\n  classes: PropTypes.object,\r\n  flightList: PropTypes.object,\r\n  bookNow: PropTypes.func,\r\n};\r\n\r\nexport default FlightListOneWay;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Radio,\r\n  FormControlLabel,\r\n  Typography,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\n\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { validateSearch } from \"../../services/global-services\";\r\nimport actions from \"../../constants/actions\";\r\nimport FlightListOneWay from \"../../components/flight-list-grid/flight-list-one-way\";\r\nimport CityJSON from \"../../mocks/cities.json\";\r\n\r\nconst cities = [...CityJSON];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  filterContainer: {\r\n    padding: theme.spacing(),\r\n    margin: \"auto\",\r\n    maxWidth: 600,\r\n    background: \"rgba(0, 0, 0, 0.87)\",\r\n    borderRadius: 8,\r\n  },\r\n  \r\n  centerContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: theme.spacing(5),\r\n    width: \"100%\",\r\n  },\r\n  inputContainer: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  centerButton: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(5),\r\n    margin: \"auto\",\r\n    maxWidth: 800,\r\n    background: \"none\", // Set background to none\r\n    boxShadow: \"none\", // Remove box shadow\r\n  },\r\n}));\r\n\r\n\r\nconst FlightSearch = (props) => {\r\n  const [source, setSource] = useState(null);\r\n  const [dest, setDest] = useState(null);\r\n  const [deptDate, setDeptDate] = useState(\"\");\r\n  const [returnDate, setReturnDate] = useState(\"\");\r\n  const [selectTrip, setSelectTrip] = useState(\"one\");\r\n  const [searchDone, setSearchDone] = useState(false);\r\n  const [cityError, setCityError] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const flightList = useSelector((state) => state.flightSearch.searchList);\r\n  const classes = useStyles();\r\n\r\n  // On Page Load\r\n  useEffect(() => {\r\n    // Reset Flight List\r\n    dispatch({\r\n      type: actions.RESET_FLIGHT_LIST,\r\n    });\r\n  }, []);\r\n\r\n  const handleSelectTrip = (e) => {\r\n    setSelectTrip(e.target.value);\r\n  };\r\n\r\n  const handleDeparture = (e) => {\r\n    setDeptDate(e.target.value);\r\n  };\r\n\r\n  const handleReturn = (e) => {\r\n    setReturnDate(e.target.value);\r\n  };\r\n\r\n  const handleSearchFlight = () => {\r\n    const payload = {\r\n      source: source?.name,\r\n      destination: dest?.name,\r\n      deptDate: deptDate,\r\n      returnDate: returnDate,\r\n      tripType: selectTrip,\r\n    };\r\n\r\n    if (\r\n      payload?.source?.toLowerCase() === payload?.destination?.toLowerCase()\r\n    ) {\r\n      setCityError(true);\r\n      setSearchDone(false);\r\n      return;\r\n    } else {\r\n      setCityError(false);\r\n    }\r\n\r\n    dispatch({\r\n      type: actions.RESET_FLIGHT_LIST,\r\n    });\r\n\r\n    dispatch({\r\n      type: actions.GET_FLIGHT_LIST,\r\n      payload,\r\n    });\r\n\r\n    setSearchDone(true);\r\n  };\r\n\r\n  const handleBookNow = (bookingVal) => {\r\n    let timer;\r\n    dispatch({\r\n      type: actions.SET_BOOKING_DETAILS,\r\n      payload: bookingVal,\r\n    });\r\n\r\n    clearTimeout(timer);\r\n\r\n    timer = setTimeout(() => {\r\n      history.push(\"/flight-booking\");\r\n    }, 100);\r\n  };\r\n\r\n  const filteredDestinations = cities.filter(\r\n    (city) => !source || city.name !== source.name\r\n  );\r\n\r\n  const filteredSources = cities.filter(\r\n    (city) => !dest || city.name !== dest.name\r\n  );\r\n\r\n  const getCurrentDate = () => {\r\n    const today = new Date();\r\n    const year = today.getFullYear();\r\n    const month = String(today.getMonth() + 1).padStart(2, \"0\");\r\n    const day = String(today.getDate()).padStart(2, \"0\");\r\n    return `${year}-${month}-${day}`;\r\n  };\r\n\r\n  const handleClearFields = () => {\r\n    setSource(null);\r\n    setDest(null);\r\n    setDeptDate(\"\");\r\n    setReturnDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={0} className={classes.paper}>\r\n      <Grid container className={classes.centerContainer}>\r\n        <RadioGroup row onChange={handleSelectTrip} value={selectTrip}>\r\n          <FormControlLabel\r\n            value=\"one\"\r\n            control={<Radio style={{ color: \"black\" }} />}\r\n            label=\"One Way\"\r\n          />\r\n          <FormControlLabel\r\n            value=\"both\"\r\n            control={<Radio style={{ color: \"black\" }} />}\r\n            label=\"Round Trip\"\r\n          />\r\n        </RadioGroup>\r\n        <Autocomplete\r\n          value={source}\r\n          onChange={(event, newValue) => {\r\n            setSource(newValue);\r\n          }}\r\n          getOptionLabel={(option) => option.name}\r\n          options={filteredSources}\r\n          style={{ width: 300, padding: \"8px\" }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Source City\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n        <Autocomplete\r\n          value={dest}\r\n          onChange={(event, newValue) => {\r\n            setDest(newValue);\r\n          }}\r\n          getOptionLabel={(option) => option.name}\r\n          options={filteredDestinations}\r\n          style={{ width: 300, padding: \"8px\" }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Destination City\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n        <TextField\r\n          label=\"Journey Date\"\r\n          type=\"date\"\r\n          value={deptDate}\r\n          onChange={handleDeparture}\r\n          variant=\"outlined\"\r\n          style={{ width: 300, padding: \"8px\" }}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          inputProps={{\r\n            min: getCurrentDate(),\r\n          }}\r\n        />\r\n        {selectTrip?.toUpperCase() === \"BOTH\" && (\r\n          <TextField\r\n            label=\"Return Date\"\r\n            type=\"date\"\r\n            value={returnDate}\r\n            onChange={handleReturn}\r\n            variant=\"outlined\"\r\n            style={{ width: 300, padding: \"8px\" }}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            inputProps={{\r\n              min: deptDate,\r\n            }}\r\n          />\r\n        )}\r\n        <div className={classes.centerButton}>\r\n          <Button\r\n            variant=\"contained\"\r\n            style={{\r\n              backgroundColor: \"black\",\r\n              color: \"white\",\r\n              borderRadius: 4,\r\n              marginRight: 8, // Add margin to the right for spacing\r\n            }}\r\n            className={classes.filterContainer}\r\n            onClick={handleSearchFlight}\r\n            disabled={validateSearch(\r\n              source,\r\n              dest,\r\n              deptDate,\r\n              returnDate,\r\n              selectTrip\r\n            )}\r\n          >\r\n            {`Search Flight`}\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleClearFields}\r\n            className={classes.clearButton}\r\n          >\r\n            Clear Fields\r\n          </Button>\r\n        </div>\r\n        {cityError && (\r\n          <Typography variant=\"body1\" color=\"error\">\r\n            {`Source and Destination City cannot be the same`}\r\n          </Typography>\r\n        )}\r\n        {searchDone && (\r\n          <FlightListOneWay flightList={flightList} bookNow={handleBookNow} />\r\n        )}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nFlightSearch.propTypes = {\r\n  history: PropTypes.object,\r\n  classes: PropTypes.object,\r\n  dispatch: PropTypes.func,\r\n  flightList: PropTypes.object,\r\n};\r\n\r\nexport default FlightSearch;\r\n","import {LOCAL_BACKEND_BASE_URL} from \"../constants\";\nimport axios from 'axios';\n\nexport default class SeatBookingServices {\n    static getAllSeats = (flightNumber) => {\n        const getAllSeatsURL = LOCAL_BACKEND_BASE_URL + 'booking/getAllSeats/' + flightNumber;\n        return axios.get(getAllSeatsURL)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                console.log(\"Error in Backend call, sending back empty seats\", error);\n                return []\n            })\n    }\n\n    static bookSeats = (flightNumber, userId, seatNumber, seatClass, price) => {\n        const bookSeatsURL = LOCAL_BACKEND_BASE_URL + 'booking/bookSeats/' + flightNumber + '/' + userId;\n        const bookSeatsRequest = {\n            seatNumber: seatNumber,\n            seatClass: seatClass,\n            price: price,\n            booked: false\n        }\n\n        return axios.post(bookSeatsURL, bookSeatsRequest)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                console.log(\"Error in Backend call, sending back empty booking\", error);\n                return null;\n            })\n    }\n\n    static createReservation = (flightNumber, userId, seatNumber, price) => {\n        const createReservationURL = LOCAL_BACKEND_BASE_URL + 'payment/createReservation/' + flightNumber + '/' + userId + '/' + seatNumber;\n        const createReservation = {\n            totalTravelFair: price\n        }\n\n        return axios.post(createReservationURL, createReservation)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                console.log(\"Error in Backend call, sending back empty reservation\", error);\n                return null;\n            })\n    }\n\n    static selectFlight = (userId, flightNumber, departure, arrival, departureDate, departureTime, arrivalDate, arrivalTime) => {\n        const selectFlightURL = LOCAL_BACKEND_BASE_URL + 'booking/bookFlights/' + userId;\n        const selectFlightRequest = {\n            flightNumber: flightNumber,\n            departure: departure,\n            arrival: arrival,\n            departureDate: departureDate,\n            departureTime: departureTime,\n            arrivalDate: arrivalDate,\n            arrivalTime: arrivalTime,\n            seatAvailability: 30\n        }\n\n        return axios.post(selectFlightURL, selectFlightRequest)\n            .then(response => {\n                return response.data;\n            })\n            .catch(error => {\n                console.log(\"Error in Backend call, sending back empty select flight\", error);\n                return null;\n            })\n    }\n}\n"],"names":["useStyles","makeStyles","textAlign","textAlignCenter","cardContainer","marginBottom","props","_flightList$result","_flightList$result2","flightList","bookNow","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","loginDone","setLoginDone","flightSelected","setFlightSelected","departureCity","setDepartureCity","arrivalCity","setArrivalCity","departureDate","setDepartureDate","departureTime","setDepartureTime","arrivalDate","setArrivalDate","arrivalTime","setArrivalTime","randomNumber","setRandomNumber","history","useHistory","component","userInfoSession","updateUserInfoSession","appendToUserInfoSession","useUserInfoSession","useEffect","login","useGoogleLogin","onSuccess","async","userInfo","GoogleServiceSingleton","getUserInfo","tokenResponse","access_token","selectedFlightNumber","selectFlightData","SeatBookingServices","selectFlight","userId","console","log","push","error","loading","_jsx","CircularProgress","result","length","_jsxs","Table","children","TableBody","slice","map","val","index","randomPrice","minimumSeatPrice","Math","floor","TableRow","TableCell","Card","className","CardContent","Grid","container","item","xs","Avatar","src","airlineLogo","alt","airlineName","Typography","align","variant","departure","flightNumber","noOfStops","arrival","Button","style","backgroundColor","color","onClick","flightDetail","handleFlightSelection","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","random","cities","theme","filterContainer","padding","spacing","margin","maxWidth","background","borderRadius","centerContainer","display","flexDirection","alignItems","justifyContent","width","inputContainer","centerButton","paper","boxShadow","source","setSource","dest","setDest","deptDate","setDeptDate","returnDate","setReturnDate","selectTrip","setSelectTrip","searchDone","setSearchDone","cityError","setCityError","dispatch","useDispatch","useSelector","state","flightSearch","searchList","type","actions","RESET_FLIGHT_LIST","filteredDestinations","filter","city","name","filteredSources","Paper","elevation","RadioGroup","row","onChange","e","FormControlLabel","control","Radio","label","Autocomplete","newValue","getOptionLabel","option","options","renderInput","params","TextField","InputLabelProps","shrink","inputProps","min","getCurrentDate","today","Date","getFullYear","String","getMonth","padStart","getDate","toUpperCase","marginRight","handleSearchFlight","_payload$source","_payload$destination","payload","destination","tripType","toLowerCase","GET_FLIGHT_LIST","disabled","validateSearch","handleClearFields","clearButton","FlightListOneWay","bookingVal","timer","SET_BOOKING_DETAILS","clearTimeout","setTimeout","getAllSeats","getAllSeatsURL","LOCAL_BACKEND_BASE_URL","axios","get","then","response","data","catch","bookSeats","seatNumber","seatClass","price","bookSeatsURL","bookSeatsRequest","booked","post","createReservation","createReservationURL","totalTravelFair","selectFlightURL","selectFlightRequest","seatAvailability"],"sourceRoot":""}